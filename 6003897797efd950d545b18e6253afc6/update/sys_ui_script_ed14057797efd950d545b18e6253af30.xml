<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>This App was almost made obsolute as Vancouver finally enables Copy&amp;Paste / Drag&amp;Drop on all OOTB Pages with the paperclip button.&#13;
If you still want to make use of this app (no popup required!), please add the following "Page Specific CSS" to all relevant Portal Pages:&#13;
body {&#13;
  --pcp-enabled: true;&#13;
}&#13;
Note:  Copy &amp; Paste is not working with Firefox and Internet Explorer because those browsers do not give access to the files in the clipboard.</description>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_376096_pcp.copy_paste_inject</name>
        <script><![CDATA[var x_376096_pcp = x_376096_pcp || {};
x_376096_pcp.copy_paste_inject = (function() {
	"use strict";
	/* global setTimeout, MutationObserver, angular */
	/* eslint no-undef: "error" */
	if (x_376096_pcp.copy_paste_inject) {
		return x_376096_pcp.copy_paste_inject;
	}
	
	const version = '1.0.2';
	const widgetIdOrSysId = [
		'widget-sc-cat-item-v2',
		'sc-checkout',
		'std_ticket_conversations',
		'widget-ticket-conversation',
		'widget-form',
		'std_ticket_attachments',
		'widget-ticket-attachments',
		'widget-sc-cat-item'
	];
	
	setTimeout(function () {
		init(this);
	});
	
	return {
		version: version,
		type: 'copy_paste_inject'
	};
	
	function init(window) {
		const shared = {
			enabled: false,
			handler: null
		};
		const observer = new window.MutationObserver(function (mutations) {
			if (!window.document || !window.document.body) {
				return;
			}
			
			const config = window.getComputedStyle(window.document.body);
			shared.enabled = config.getPropertyValue('--pcp-enabled') == 'true';
			if (!shared.enabled) {
				return;
			}
			
			for (let i = 0; i < mutations.length; i++) {
				const mutation = mutations[i];
				if (mutation.addedNodes) {
					for (let j = 0; j < mutation.addedNodes.length; j++) {
						const node = mutation.addedNodes[j];
						if (!shared.handler && node.classList && !node.classList.contains('pcp-copy-paste-injected')) {
							const $element = window.angular.element(node);
							const $scope = $element.scope();
							if ($scope && $scope.widget && (widgetIdOrSysId.includes($scope.widget.sys_id) || widgetIdOrSysId.includes($scope.widget.id))) {
								node.classList.add('pcp-copy-paste-injected');
								shared.handler = new PCPAttachmentHandler(window, $scope, shared);
							}
						}
					}
				}
			}
		});
		
		observer.observe(window.document, {
			childList: true,
			subtree: true
		});
	}
	
	function PCPAttachmentHandler(window, $scope, shared) {
		const attachmentHandler = $scope.attachmentHandler;
		const $window = window.angular.element(window);
		let lastDropEvent = null;
		let lastPasteEvent = null;		
		let dropTarget = null;
		let uploadInProgress = false;
		const overlay = window.angular.element('<div style="position:fixed;top:0;left:0;width:100%;height:100%;background-color:#000;filter:alpha(opacity=50);-moz-opacity:0.5;-khtml-opacity:0.5;opacity:0.5;z-index:10000;pointer-events:none;"></div>');
		
		$window.on('dragover.pcp', function (event) {
			event.preventDefault();
			event.originalEvent.dataTransfer.dropEffect = 'copy';
		});
		
		// add on overlay to mark the "dropzone"
		$window.on('dragenter.pcp', function (event) {
			event.preventDefault();
			dropTarget = event.target;
			overlay.appendTo(window.document.body);
		});
		
		// remove the "dropzone" marker
		$window.on('dragleave.pcp', function (event) {
			if (dropTarget == event.target) {
				overlay.remove();
			}
		});
		
		$window.on('drop.pcp', function (event) {
			event.preventDefault(); // prevent the browser from opening the file
			overlay.remove();
			
			const files = event.originalEvent.dataTransfer.files;
			if (files.length && !uploadInProgress) {
				// Whenever a form is loaded with an conversations widget,
				// the this handler is registered on the form *and* the widget conversation
				// This will cause for this callback to executed twice -
				// and therefore uploading the file twice
				if (lastDropEvent == event.timeStamp) {
					return;
				}
				
				lastDropEvent = event.timeStamp;
				attachmentHandler.onFileSelect(files);
			}
		});
		
		$window.on('paste.pcp', function (event) {
			const files = event.originalEvent.clipboardData.files;
			if (files.length && !uploadInProgress) {
				// in case a file is in the clipboard, the file should be uploaded
				// and prevent the default behaviour which is to copy the file's name
				// into whatever is currently selected (e.g. a input field)
				event.preventDefault();
				
				// Whenever a form is loaded with an conversations widget,
				// the this handler is registered on the form *and* the widget conversation
				// This will cause for this callback to executed twice -
				// and therefore uploading the file twice
				if (lastPasteEvent == event.timeStamp) {
					return;
				}
				
				lastPasteEvent = event.timeStamp;
				attachmentHandler.onFileSelect(files);
			}
		});
		
		$scope.$on('attachment.upload.start', function () {
			uploadInProgress = true;
		});
		
		$scope.$on('attachment.upload.stop', function () {
			uploadInProgress = false;
		});
		
		$scope.$on('$destroy', function () {
			$window.off('paste.pcp');
			$window.off('drop.pcp');
			$window.off('dragleave.pcp');
			$window.off('dragenter.pcp');
			$window.off('dragover.pcp');
			
			// Note: Navigating to a different page in the Service Portal does not reload the page.
			// The following will cause for re-initialization of the PCPAttachmentHandler,
			// if the "Page Specific CSS" of the new page is configured to do so.
			shared.enabled = false;
			shared.handler = null;
		});
	}
})();
]]></script>
        <script_name>copy_paste_inject</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-10 12:11:33</sys_created_on>
        <sys_id>ed14057797efd950d545b18e6253af30</sys_id>
        <sys_mod_count>78</sys_mod_count>
        <sys_name>x_376096_pcp.copy_paste_inject</sys_name>
        <sys_package display_value="Portal Copy Paste" source="x_376096_pcp">6003897797efd950d545b18e6253afc6</sys_package>
        <sys_policy/>
        <sys_scope display_value="Portal Copy Paste">6003897797efd950d545b18e6253afc6</sys_scope>
        <sys_update_name>sys_ui_script_ed14057797efd950d545b18e6253af30</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2023-12-02 23:35:23</sys_updated_on>
        <ui_type>1</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
